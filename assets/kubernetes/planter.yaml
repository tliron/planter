apiVersion: v1
kind: ServiceAccount

metadata:
  name: planter
  namespace: !!string $NAMESPACE

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding

metadata:
  name: planter

subjects:
- kind: ServiceAccount
  name: planter
  namespace: !!string $NAMESPACE # required

roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin # should already exist in the cluster

---

apiVersion: apps/v1
kind: Deployment

metadata:
  name: planter-operator
  namespace: !!string $NAMESPACE
  labels:
    app.kubernetes.io/name: planter-operator
    app.kubernetes.io/instance: planter-operator-$NAMESPACE
    app.kubernetes.io/version: !!string $VERSION
    app.kubernetes.io/component: operator
    app.kubernetes.io/part-of: planter
    app.kubernetes.io/managed-by: planter

spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: planter-operator
      app.kubernetes.io/instance: planter-operator-$NAMESPACE
      app.kubernetes.io/version: !!string $VERSION
      app.kubernetes.io/component: operator
  template:
    metadata:
      labels:
        app.kubernetes.io/name: planter-operator
        app.kubernetes.io/instance: planter-operator-$NAMESPACE
        app.kubernetes.io/version: !!string $VERSION
        app.kubernetes.io/component: operator
        app.kubernetes.io/part-of: planter
        app.kubernetes.io/managed-by: planter
    spec:
      serviceAccountName: planter # must be in our namespace
      containers:
      - name: operator
        image: $REGISTRY_URL/tliron/planter-operator:latest
        imagePullPolicy: Always
        volumeMounts:
        - name: cache
          mountPath: /cache
        env:
        # Vars with the "PLANTER_OPERATOR_" prefix become CLI flags 
        - name: PLANTER_OPERATOR_cache
          value: /cache
        - name: PLANTER_OPERATOR_concurrency
          value: '3'
        - name: PLANTER_OPERATOR_verbose
          value: '1'
        livenessProbe:
          httpGet:
            port: 8086
            path: /live
        readinessProbe:
          httpGet:
            port: 8086
            path: /ready
      volumes:
      - name: cache
        emptyDir: {}
