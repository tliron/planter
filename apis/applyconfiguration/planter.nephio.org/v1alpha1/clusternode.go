// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// ClusterNodeApplyConfiguration represents an declarative configuration of the ClusterNode type for use
// with apply.
type ClusterNodeApplyConfiguration struct {
	Count        *int              `json:"count,omitempty"`
	Labels       map[string]string `json:"labels,omitempty"`
	KernelConfig *string           `json:"kernelConfig,omitempty"`
	MemoryConfig *string           `json:"memoryConfig,omitempty"`
}

// ClusterNodeApplyConfiguration constructs an declarative configuration of the ClusterNode type for use with
// apply.
func ClusterNode() *ClusterNodeApplyConfiguration {
	return &ClusterNodeApplyConfiguration{}
}

// WithCount sets the Count field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Count field is set to the value of the last call.
func (b *ClusterNodeApplyConfiguration) WithCount(value int) *ClusterNodeApplyConfiguration {
	b.Count = &value
	return b
}

// WithLabels puts the entries into the Labels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Labels field,
// overwriting an existing map entries in Labels field with the same key.
func (b *ClusterNodeApplyConfiguration) WithLabels(entries map[string]string) *ClusterNodeApplyConfiguration {
	if b.Labels == nil && len(entries) > 0 {
		b.Labels = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Labels[k] = v
	}
	return b
}

// WithKernelConfig sets the KernelConfig field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the KernelConfig field is set to the value of the last call.
func (b *ClusterNodeApplyConfiguration) WithKernelConfig(value string) *ClusterNodeApplyConfiguration {
	b.KernelConfig = &value
	return b
}

// WithMemoryConfig sets the MemoryConfig field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MemoryConfig field is set to the value of the last call.
func (b *ClusterNodeApplyConfiguration) WithMemoryConfig(value string) *ClusterNodeApplyConfiguration {
	b.MemoryConfig = &value
	return b
}
